# docker-compose.yml
#
# Defines and runs our multi-container application.
# To run: `docker-compose up -d`
# To stop: `docker-compose down`

version: '3.8'

services:
  # Elasticsearch Service: Our database and search engine for logs.
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1 # Using a specific, stable version.
    container_name: elasticsearch
    environment:
      - discovery.type=single-node # Run as a single node cluster, perfect for development.
      - xpack.security.enabled=false # Disable security for easy local development access.
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" # Allocate memory to Elasticsearch.
    ports:
      - "9200:9200" # Expose Elasticsearch's API port to our local machine.
      - "9300:9300" # Expose the transport port.
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data # Persist data even if the container stops.
    networks:
      - logging-network # Connect to our custom network.

  # RabbitMQ Service: Our message broker to queue incoming logs.
  rabbitmq:
    image: rabbitmq:3.12-management # Use the image that includes the management UI.
    container_name: rabbitmq
    ports:
      - "5672:5672"   # Expose the standard AMQP port for our services to connect.
      - "15672:15672" # Expose the management UI port to our local machine.
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq # Persist RabbitMQ data.
    networks:
      - logging-network # Connect to our custom network.

# Volumes are used to persist data generated by containers.
volumes:
  elasticsearch-data:
    driver: local
  rabbitmq-data:
    driver: local

# Networks allow containers to discover and communicate with each other.
networks:
  logging-network:
    driver: bridge